import { Category } from '../types';

export const initialDsaData: Omit<Category, 'problems'>[] & { problems: Omit<Category['problems'][0], 'completed' | 'leetCodeUrl'>[] }[] = [
  {
    category: 'Arrays',
    icon: 'üì¶',
    problems: [
      { name: 'Two Sum', difficulty: 'Easy' },
      { name: 'Best Time to Buy and Sell Stock', difficulty: 'Easy' },
      { name: 'Maximum Subarray', difficulty: 'Easy' },
      { name: 'Product of Array Except Self', difficulty: 'Medium' },
      { name: 'Move Zeroes', difficulty: 'Easy' },
      { name: 'Merge Sorted Array', difficulty: 'Easy' },
      { name: 'Rotate Array', difficulty: 'Medium' },
      { name: 'Contains Duplicate', difficulty: 'Easy' },
      { name: 'Missing Number', difficulty: 'Easy' },
      { name: 'Set Matrix Zeroes', difficulty: 'Medium' },
      { name: 'Spiral Matrix', difficulty: 'Medium' },
      { name: 'Pascals Triangle', difficulty: 'Easy' },
      { name: 'Merge Intervals', difficulty: 'Medium' },
      { name: 'Insert Interval', difficulty: 'Medium' },
      { name: 'Non-overlapping Intervals', difficulty: 'Medium' },
      { name: 'Trapping Rain Water', difficulty: 'Hard' },
      { name: 'Max Consecutive Ones', difficulty: 'Easy' },
      { name: 'Subarray Sum Equals K', difficulty: 'Medium' },
      { name: 'Longest Consecutive Sequence', difficulty: 'Hard' },
      { name: 'Find the Duplicate Number', difficulty: 'Medium' },
      { name: 'Game of Life', difficulty: 'Medium' },
      { name: 'Minimum Size Subarray Sum', difficulty: 'Medium' },
      { name: 'Maximum Product Subarray', difficulty: 'Medium' },
      { name: 'Candy', difficulty: 'Hard' },
      { name: 'Jump Game', difficulty: 'Medium' },
    ],
    hardList: ['Trapping Rain Water', 'Longest Consecutive Sequence', 'Candy', 'Maximum Product Subarray', 'Subarray Sum Equals K', 'Merge Intervals', 'Insert Interval', 'Non-overlapping Intervals', 'Jump Game', 'Set Matrix Zeroes']
  },
  {
    category: 'Strings',
    icon: 'üî†',
    problems: [
      { name: 'Valid Anagram', difficulty: 'Easy' },
      { name: 'Group Anagrams', difficulty: 'Medium' },
      { name: 'Valid Palindrome', difficulty: 'Easy' },
      { name: 'Longest Palindromic Substring', difficulty: 'Medium' },
      { name: 'Longest Common Prefix', difficulty: 'Easy' },
      { name: 'Implement strStr()', difficulty: 'Easy' },
      { name: 'Minimum Window Substring', difficulty: 'Hard' },
      { name: 'Multiply Strings', difficulty: 'Medium' },
      { name: 'Count and Say', difficulty: 'Medium' },
      { name: 'String Compression', difficulty: 'Easy' },
      { name: 'Decode Ways', difficulty: 'Medium' },
      { name: 'Repeated Substring Pattern', difficulty: 'Easy' },
      { name: 'Check if a String Contains All Binary Codes', difficulty: 'Medium' },
      { name: 'Longest Substring Without Repeating Characters', difficulty: 'Medium' },
      { name: 'Reverse Words in a String', difficulty: 'Medium' },
      { name: 'Palindromic Substrings', difficulty: 'Medium' },
      { name: 'Isomorphic Strings', difficulty: 'Easy' },
      { name: 'Word Break', difficulty: 'Medium' },
      { name: 'Regular Expression Matching', difficulty: 'Hard' },
      { name: 'Wildcard Matching', difficulty: 'Hard' },
    ],
    hardList: ['Minimum Window Substring', 'Regular Expression Matching', 'Wildcard Matching', 'Word Break', 'Decode Ways', 'Longest Palindromic Substring', 'Multiply Strings', 'Count and Say', 'Longest Substring Without Repeating Characters', 'Palindromic Substrings']
  },
  {
    category: 'Linked Lists',
    icon: 'üîó',
    problems: [
      { name: 'Reverse Linked List', difficulty: 'Easy' },
      { name: 'Merge Two Sorted Lists', difficulty: 'Easy' },
      { name: 'Palindrome Linked List', difficulty: 'Easy' },
      { name: 'Linked List Cycle', difficulty: 'Easy' },
      { name: 'Remove Nth Node From End', difficulty: 'Medium' },
      { name: 'Add Two Numbers', difficulty: 'Medium' },
      { name: 'Intersection of Two Linked Lists', difficulty: 'Easy' },
      { name: 'Copy List with Random Pointer', difficulty: 'Medium' },
      { name: 'Rotate List', difficulty: 'Medium' },
      { name: 'Sort List', difficulty: 'Medium' },
      { name: 'Reorder List', difficulty: 'Medium' },
      { name: 'Merge k Sorted Lists', difficulty: 'Hard' },
      { name: 'Reverse Nodes in k-Group', difficulty: 'Hard' },
      { name: 'Delete Node in a Linked List', difficulty: 'Medium' },
      { name: 'Flatten a Multilevel Doubly Linked List', difficulty: 'Medium' },
      { name: 'Odd Even Linked List', difficulty: 'Medium' },
      { name: 'Swap Nodes in Pairs', difficulty: 'Medium' },
      { name: 'Convert Sorted List to BST', difficulty: 'Medium' },
      { name: 'Split Linked List in Parts', difficulty: 'Medium' },
      { name: 'Remove Duplicates from Sorted List', difficulty: 'Easy' },
    ],
    hardList: ['Merge k Sorted Lists', 'Reverse Nodes in k-Group', 'Flatten a Multilevel Doubly Linked List', 'Copy List with Random Pointer', 'Rotate List', 'Reorder List', 'Sort List', 'Convert Sorted List to BST', 'Intersection of Two Linked Lists', 'Split Linked List in Parts']
  },
  {
    category: 'Sliding Window',
    icon: 'ü™ü',
    problems: [
      { name: 'Maximum Sum Subarray of Size K', difficulty: 'Easy' },
      { name: 'Longest Substring Without Repeating Characters', difficulty: 'Medium' },
      { name: 'Longest Repeating Character Replacement', difficulty: 'Medium' },
      { name: 'Minimum Window Substring', difficulty: 'Hard' },
      { name: 'Permutation in String', difficulty: 'Medium' },
      { name: 'Sliding Window Maximum', difficulty: 'Hard' },
      { name: 'Count Number of Nice Subarrays', difficulty: 'Medium' },
      { name: 'Binary Subarrays With Sum', difficulty: 'Medium' },
      { name: 'Longest Subarray of 1\'s After Deleting One Element', difficulty: 'Medium' },
      { name: 'Max Consecutive Ones III', difficulty: 'Medium' },
      { name: 'Grumpy Bookstore Owner', difficulty: 'Medium' },
      { name: 'Max Sum of Consecutive Subarray with One Deletion', difficulty: 'Hard' },
    ],
    hardList: ['Minimum Window Substring', 'Sliding Window Maximum', 'Max Sum of Consecutive Subarray with One Deletion', 'Longest Repeating Character Replacement', 'Permutation in String', 'Count Number of Nice Subarrays', 'Binary Subarrays With Sum', 'Longest Substring Without Repeating Characters', 'Max Consecutive Ones III', 'Grumpy Bookstore Owner']
  },
  {
    category: 'Two Pointers',
    icon: 'üëÜ',
    problems: [
      { name: '3Sum', difficulty: 'Medium' },
      { name: '4Sum', difficulty: 'Medium' },
      { name: 'Container With Most Water', difficulty: 'Medium' },
      { name: 'Remove Duplicates from Sorted Array', difficulty: 'Easy' },
      { name: 'Move Zeroes', difficulty: 'Easy' },
      { name: 'Valid Palindrome', difficulty: 'Easy' },
      { name: 'Merge Sorted Array', difficulty: 'Easy' },
      { name: 'Reverse String', difficulty: 'Easy' },
      { name: 'Remove Element', difficulty: 'Easy' },
      { name: 'Sort Colors', difficulty: 'Medium' },
      { name: 'Boats to Save People', difficulty: 'Medium' },
      { name: 'Trapping Rain Water', difficulty: 'Hard' },
    ],
    hardList: ['4Sum', 'Trapping Rain Water', 'Container With Most Water', 'Boats to Save People', 'Valid Palindrome', 'Remove Duplicates from Sorted Array', 'Sort Colors', 'Merge Sorted Array', 'Move Zeroes']
  },
  {
    category: 'Fast and Slow Pointers',
    icon: 'üèÉ',
    problems: [
      { name: 'Linked List Cycle', difficulty: 'Easy' },
      { name: 'Middle of the Linked List', difficulty: 'Easy' },
      { name: 'Happy Number', difficulty: 'Easy' },
      { name: 'Find the Duplicate Number', difficulty: 'Medium' },
      { name: 'Reorder List', difficulty: 'Medium' },
      { name: 'Palindrome Linked List', difficulty: 'Easy' },
      { name: 'Detect Cycle in Linked List', difficulty: 'Medium' },
      { name: 'Circular Linked List', difficulty: 'Medium' },
    ],
    hardList: []
  },
  {
    category: 'Trees',
    icon: 'üå≥',
    problems: [
      { name: 'Maximum Depth of Binary Tree', difficulty: 'Easy' },
      { name: 'Invert Binary Tree', difficulty: 'Easy' },
      { name: 'Diameter of Binary Tree', difficulty: 'Easy' },
      { name: 'Balanced Binary Tree', difficulty: 'Easy' },
      { name: 'Path Sum', difficulty: 'Easy' },
      { name: 'Same Tree', difficulty: 'Easy' },
      { name: 'Symmetric Tree', difficulty: 'Easy' },
      { name: 'Binary Tree Level Order Traversal', difficulty: 'Medium' },
      { name: 'Construct Binary Tree from Preorder and Inorder', difficulty: 'Medium' },
      { name: 'Validate Binary Search Tree', difficulty: 'Medium' },
      { name: 'Lowest Common Ancestor', difficulty: 'Medium' },
      { name: 'Binary Tree Right Side View', difficulty: 'Medium' },
      { name: 'Serialize and Deserialize Binary Tree', difficulty: 'Hard' },
      { name: 'Kth Smallest Element in BST', difficulty: 'Medium' },
      { name: 'Convert Sorted Array to BST', difficulty: 'Easy' },
      { name: 'Binary Tree Zigzag Level Order', difficulty: 'Medium' },
      { name: 'Count Good Nodes in Binary Tree', difficulty: 'Medium' },
      { name: 'Maximum Path Sum', difficulty: 'Hard' },
    ],
    hardList: ['Serialize and Deserialize Binary Tree', 'Maximum Path Sum']
  },
  {
    category: 'Graphs',
    icon: 'üìà',
    problems: [
      { name: 'Number of Islands', difficulty: 'Medium' },
      { name: 'Clone Graph', difficulty: 'Medium' },
      { name: 'Course Schedule', difficulty: 'Medium' },
      { name: 'Course Schedule II', difficulty: 'Medium' },
      { name: 'Graph Valid Tree', difficulty: 'Medium' },
      { name: 'Pacific Atlantic Water Flow', difficulty: 'Medium' },
      { name: 'Word Ladder', difficulty: 'Hard' },
      { name: 'Rotting Oranges', difficulty: 'Medium' },
      { name: 'Network Delay Time', difficulty: 'Medium' },
      { name: 'Reconstruct Itinerary', difficulty: 'Hard' },
      { name: 'Detect Cycle in Directed Graph', difficulty: 'Medium' },
      { name: 'Shortest Path in Binary Matrix', difficulty: 'Medium' },
      { name: 'Bipartite Graph', difficulty: 'Medium' },
      { name: 'Strongly Connected Components (Kosaraju\'s Algo)', difficulty: 'Hard' },
      { name: 'Articulation Point', difficulty: 'Hard' },
      { name: 'Bridges in Graph', difficulty: 'Hard' },
      { name: 'Kruskal\'s Algorithm', difficulty: 'Medium' },
      { name: 'Prim\'s MST', difficulty: 'Medium' },
      { name: 'Dijkstra\'s Algorithm', difficulty: 'Medium' },
      { name: 'Bellman-Ford', difficulty: 'Medium' },
    ],
    hardList: ['Reconstruct Itinerary', 'Strongly Connected Components (Kosaraju)', 'Articulation Point', 'Bridges in Graph', "Dijkstra's Algorithm", 'Bellman-Ford', 'Pacific Atlantic Water Flow', 'Course Schedule II', 'Graph Valid Tree']
  },
  {
    category: 'Dynamic Programming',
    icon: 'üßÆ',
    problems: [
      { name: 'Fibonacci Number', difficulty: 'Easy' },
      { name: 'Climbing Stairs', difficulty: 'Easy' },
      { name: 'House Robber', difficulty: 'Medium' },
      { name: 'Maximum Subarray', difficulty: 'Medium' },
      { name: 'Coin Change', difficulty: 'Medium' },
      { name: 'Longest Increasing Subsequence', difficulty: 'Medium' },
      { name: 'Longest Common Subsequence', difficulty: 'Medium' },
      { name: 'Edit Distance', difficulty: 'Hard' },
      { name: 'Word Break', difficulty: 'Medium' },
      { name: 'Partition Equal Subset Sum', difficulty: 'Medium' },
      { name: 'Palindromic Substrings', difficulty: 'Medium' },
      { name: 'Decode Ways', difficulty: 'Medium' },
      { name: 'Burst Balloons', difficulty: 'Hard' },
      { name: 'Matrix Chain Multiplication', difficulty: 'Hard' },
      { name: '0/1 Knapsack', difficulty: 'Medium' },
      { name: 'Subset Sum Problem', difficulty: 'Medium' },
      { name: 'Rod Cutting', difficulty: 'Medium' },
      { name: 'Longest Palindromic Subsequence', difficulty: 'Medium' },
      { name: 'Wildcard Matching', difficulty: 'Hard' },
      { name: 'Interleaving String', difficulty: 'Hard' },
      { name: 'Minimum Path Sum', difficulty: 'Medium' },
      { name: 'Unique Paths', difficulty: 'Medium' },
      { name: 'Cherry Pickup', difficulty: 'Hard' },
      { name: 'Boolean Parenthesization', difficulty: 'Hard' },
      { name: 'Count All Palindromic Subsequences', difficulty: 'Hard' },
    ],
    hardList: ['Edit Distance', 'Burst Balloons', 'Matrix Chain Multiplication', '0/1 Knapsack', 'Rod Cutting', 'Boolean Parenthesization', 'Count All Palindromic Subsequences', 'Interleaving String', 'Wildcard Matching', 'Cherry Pickup']
  },
  {
    category: 'Bit Manipulation',
    icon: 'üî¢',
    problems: [
      { name: 'Single Number', difficulty: 'Easy' },
      { name: 'Bitwise AND of Numbers Range', difficulty: 'Medium' },
      { name: 'Counting Bits', difficulty: 'Easy' },
      { name: 'Missing Number', difficulty: 'Easy' },
      { name: 'Reverse Bits', difficulty: 'Easy' },
      { name: 'Number of 1 Bits', difficulty: 'Easy' },
      { name: 'Subsets using Bitmask', difficulty: 'Medium' },
      { name: 'Power of Two', difficulty: 'Easy' },
      { name: 'XOR of All Subsets', difficulty: 'Medium' },
      { name: 'Maximum XOR of Two Numbers', difficulty: 'Hard' },
    ],
    hardList: ['Maximum XOR of Two Numbers']
  },
  {
    category: 'Heaps / PQs',
    icon: 'üìä',
    problems: [
      { name: 'Kth Largest Element in Array', difficulty: 'Medium' },
      { name: 'Top K Frequent Elements', difficulty: 'Medium' },
      { name: 'Find Median from Data Stream', difficulty: 'Hard' },
      { name: 'Merge K Sorted Lists', difficulty: 'Hard' },
      { name: 'Sliding Window Maximum', difficulty: 'Hard' },
      { name: 'Reorganize String', difficulty: 'Medium' },
      { name: 'Task Scheduler', difficulty: 'Medium' },
      { name: 'IPO Problem', difficulty: 'Hard' },
      { name: 'Minimum Cost to Connect Ropes', difficulty: 'Easy' },
      { name: 'Frequency Sort', difficulty: 'Medium' },
    ],
    hardList: ['Merge K Sorted Lists', 'Sliding Window Maximum', 'Find Median from Data Stream', 'IPO Problem', 'Top K Frequent Elements', 'Task Scheduler', 'Reorganize String', 'Frequency Sort', 'Kth Largest Element in Array', 'Minimum Cost to Connect Ropes']
  },
  {
    category: 'Trie',
    icon: 'üßæ',
    problems: [
      { name: 'Implement Trie', difficulty: 'Medium' },
      { name: 'Search Suggestions System', difficulty: 'Hard' },
      { name: 'Replace Words', difficulty: 'Medium' },
      { name: 'Longest Word in Dictionary', difficulty: 'Medium' },
      { name: 'Word Search II', difficulty: 'Hard' },
    ],
    hardList: ['Search Suggestions System', 'Word Search II']
  },
  {
    category: 'Greedy',
    icon: 'üìê',
    problems: [
      { name: 'Jump Game', difficulty: 'Medium' },
      { name: 'Gas Station', difficulty: 'Medium' },
      { name: 'Candy', difficulty: 'Hard' },
      { name: 'Non-overlapping Intervals', difficulty: 'Medium' },
      { name: 'Queue Reconstruction by Height', difficulty: 'Medium' },
      { name: 'Partition Labels', difficulty: 'Medium' },
      { name: 'Merge Triplets to Form Target', difficulty: 'Medium' },
      { name: 'Minimum Number of Arrows to Burst Balloons', difficulty: 'Medium' },
      { name: 'Lemonade Change', difficulty: 'Easy' },
      { name: 'Monotone Increasing Digits', difficulty: 'Medium' },
    ],
    hardList: ['Candy', 'Non-overlapping Intervals', 'Queue Reconstruction by Height', 'Merge Triplets to Form Target', 'Minimum Number of Arrows to Burst Balloons', 'Lemonade Change', 'Monotone Increasing Digits', 'Gas Station', 'Partition Labels', 'Jump Game']
  },
  {
    category: 'Segment Tree / Advanced',
    icon: 'üß±',
    problems: [
      { name: 'Range Sum Query', difficulty: 'Medium' },
      { name: 'Lazy Propagation Segment Tree', difficulty: 'Hard' },
      { name: 'Count Inversions', difficulty: 'Hard' },
      { name: 'Range Minimum Query', difficulty: 'Medium' },
      { name: 'Dynamic Range Sum Updates', difficulty: 'Hard' },
    ],
    hardList: ['Lazy Propagation Segment Tree', 'Count Inversions', 'Dynamic Range Sum Updates']
  }
];